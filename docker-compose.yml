---
version: '3.7'

# In order to set configuration, please use a .env file in
# your compose project directory (the same directory as your
# docker-compose.yml), and set database options, application
# name, key, and other settings there.
# A list of available settings is available in .env.example
#
# The services should scale properly across a swarm cluster
# if the volumes are properly shared between cluster members.

services:

  app:
    # Comment to use dockerhub image
    build:
      context: .
      dockerfile: contrib/docker/Dockerfile.apache
      #dockerfile: contrib/docker/Dockerfile.fpm
    image: pixelfed
    restart: unless-stopped
    ## If you have a traefik running, uncomment this to expose Pixelfed
    # labels:
    #   - traefik.enable=true
    #   - traefik.frontend.rule=Host:your.url
    #   - traefik.port=80
    ## If you have a standard reverse proxy, uncommit this to expose Pixelfed
    # ports:
    #   - "127.0.0.1:8088:80"
    env_file:
      - ./.env
    environment:
      VIRTUAL_HOST: ${APP_DOMAIN}
      LETSENCRYPT_HOST: ${APP_DOMAIN}
      LETSENCRYPT_EMAIL: ${TLS_CERT_EMAIL}
    volumes:
      - "app-storage:/var/www/storage"
      - "app-bootstrap:/var/www/bootstrap"
      - "./.env:/var/www/.env"
    networks:
      # - external
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: 100m

  worker:  # Comment this whole block if HORIZON_EMBED is true.
    # Comment to use dockerhub image
    build:
      context: .
      dockerfile: contrib/docker/Dockerfile.apache
      #dockerfile: contrib/docker/Dockerfile.fpm
    image: pixelfed
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - "app-storage:/var/www/storage"
      - "app-bootstrap:/var/www/bootstrap"
    networks:
      - external  # Required for ActivityPub
      - internal
    command: gosu www-data php artisan horizon
    logging:
      driver: "json-file"
      options:
        max-size: 100m

  # db:
  #   image: mysql:8.0
  #   restart: unless-stopped
  #   networks:
  #     - internal
  #   command: --default-authentication-plugin=mysql_native_password
  #   environment:
  #     - MYSQL_DATABASE=pixelfed
  #     - MYSQL_USER=${DB_USERNAME}
  #     - MYSQL_PASSWORD=${DB_PASSWORD}
  #     - MYSQL_RANDOM_ROOT_PASSWORD=true
  #   volumes:
  #     - "db-data:/var/lib/mysql"
  #     - "./custom-config/mysql:/etc/mysql/conf.d"
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: 100m

  db:
    image: postgres:11
    restart: unless-stopped
    networks:
      - internal
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - "pg-data:/var/lib/postgresql/data"
    logging:
      driver: "json-file"
      options:
        max-size: 100m

  redis:
    image: redis:5-alpine
    restart: unless-stopped
    volumes:
      - "redis-data:/data"
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: 100m

  nginx-proxy:
    image: jwilder/nginx-proxy:alpine-0.7.0
    ports:
      - "${SSL_EXTERNAL_LISTEN_PORT:-443}:443"
      - "${NONSSL_EXTERNAL_LISTEN_PORT:-80}:80"
    restart: unless-stopped
    container_name: pixelfed_nginx
    networks:
      - internal
      - external
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - pixelfed-nginx-certs:/etc/nginx/certs:ro
      - pixelfed-nginx-vhostd:/etc/nginx/vhost.d
      - pixelfed-nginx-html:/usr/share/nginx/html
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    logging:
      driver: "json-file"
      options:
        max-size: 100m

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion:v1.12
    container_name: pixelfed_le
    restart: unless-stopped
    init: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - pixelfed-nginx-certs:/etc/nginx/certs
      - pixelfed-nginx-vhostd:/etc/nginx/vhost.d
      - pixelfed-nginx-html:/usr/share/nginx/html
    entrypoint: bash -c '[ "$DISABLE_LETSENCRYPT" = true ] && (echo "LE disabled, sleeping" && sleep 9999999999999) || /app/entrypoint.sh /app/start.sh'
    environment:
      DISABLE_LETSENCRYPT: ${DISABLE_LETSENCRYPT:-false}
    logging:
      driver: "json-file"
      options:
        max-size: 100m


# Adjust your volume data in order to store data where you wish
volumes:
  redis-data:
  # db-data:
  pg-data:
  app-storage:
  app-bootstrap:
  pixelfed-nginx-certs:
  pixelfed-nginx-vhostd:
  pixelfed-nginx-html:

networks:
  internal:
    internal: true
  external:
    driver: bridge
